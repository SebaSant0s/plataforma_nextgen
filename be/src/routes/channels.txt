import express from 'express';
import { PrismaClient, Prisma } from '@prisma/client';
import {config, own_capabilities} from '../utils/utils'


const prisma = new PrismaClient();
const router = express.Router();

//
// 1) “queryChannels” list endpoint
//
router.post('/channels', async (req, res) => {
  const start = Date.now();
  try {
    const { filter_conditions = {}, message_limit = 25 } = req.body as any;

    // build Prisma where
    const where: any = {};
    if (filter_conditions.cid?.['$eq'])  where.cid  = filter_conditions.cid['$eq'];
    if (filter_conditions.id?.['$eq'])   where.id   = filter_conditions.id['$eq'];
    if (filter_conditions.type?.['$eq']) where.type = filter_conditions.type['$eq'];

    const dbChannels = await prisma.chat_channels.findMany({ where });

    const channels = await Promise.all(
      dbChannels.map(async ch => {
        // load last N messages
        const dbMessages = await prisma.chat_messages.findMany({
          where:   { cid: ch.cid },
          orderBy: { created_at: 'desc' },
          take:    message_limit,
        });

        // map to MessageResponseBase
        const messages = dbMessages
          .reverse()
          .map(m => ({
            id: m.id,
            text: m.text,
            html: m.html,
            type: m.type,
            user: m.user,
            attachments: m.attachments,
            latest_reactions: m.latest_reactions,
            own_reactions: m.own_reactions,
            reaction_counts: m.reaction_counts,
            reaction_scores: m.reaction_scores,
            reply_count: m.reply_count,
            deleted_reply_count: m.deleted_reply_count,
            cid: m.cid,
            created_at: m.created_at!.toISOString(),
            updated_at: m.updated_at!.toISOString(),
            shadowed: m.shadowed,
            mentioned_users: m.mentioned_users,
            silent: m.silent,
            pinned: m.pinned,
            pinned_at: m.pinned_at?.toISOString() || null,
            pinned_by: m.pinned_by,
            pin_expires: m.pin_expires?.toISOString() || null,
            restricted_visibility: m.restricted_visibility,
          }));

        const pinned_messages = messages.filter(m => m.pinned);
        const last_message_at =
          messages.length > 0
            ? messages[messages.length - 1].created_at
            : ch.last_message_at?.toISOString() || null;

        return {
          channel: {
            id: ch.id,
            cid: ch.cid,
            type: ch.type,
            name: ch.name,
            created_by: ch.created_by,
            config: ch.config,
            member_count: ch.member_count,
            blocked: ch.blocked,
            disabled: ch.disabled,
            frozen: ch.frozen,
            hidden: ch.hidden,
            own_capabilities: ch.own_capabilities,
            created_at: ch.created_at!.toISOString(),
            updated_at: ch.updated_at!.toISOString(),
            last_message_at,
          },
          members: [],              // ChannelMemberResponse[]
          watchers: [],             // UserResponse[]
          read: [],                 // ReadResponse[]
          pinned_messages,          // MessageResponse[]
          watcher_count: 0,         // number
          membership: { user_id: 'test-member' },
          messages,                 // MessageResponse[]
        };
      }),
    );
    const durationMs = Date.now() - start;

    res.json({
      duration: `${durationMs.toFixed(2)}ms`,
      channels,       // ChannelAPIResponse[]
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to query channels' });
  }
});

//
// 2) Single‐channel “query” endpoint, now fetching created_by from chat_users
//
router.post('/channels/:type/:id/query', async (req, res) => {
  const start = Date.now();
  const { type, id } = req.params;
  const { data, message_limit = 25 } = req.body as any;

  try {
    const now = new Date();

    // ───────────────────────────────────────────────────────────
    // Fetch the creator from your chat_users table
    // ───────────────────────────────────────────────────────────
    const creatorId =
      typeof data.created_by === 'string'
        ? data.created_by
        : data.created_by?.id;
    let creatorJson: Prisma.InputJsonValue = {};
    if (creatorId) {
      const user = await prisma.chat_users.findUnique({
        where: { id: creatorId },
      });
      if (user) {
        creatorJson = {
          id:          user.id,
          name:        user.name,
          language:    user.language,
          role:        user.role,
          teams:       user.teams,
          created_at:  user.created_at.toISOString(),
          updated_at:  user.updated_at.toISOString(),
          banned:      user.banned,
          online:      user.online,
          blocked_user_ids: user.blocked_user_ids,
          last_active: user.last_active?.toISOString() ?? null
        };
      }
    }

    // ───────────────────────────────────────────────────────────
    // Upsert the channel row, embedding that creator JSON
    // ───────────────────────────────────────────────────────────
    await prisma.chat_channels.upsert({
      where: { id },
      create: {
        id,
        type,
        cid:              `${type}:${id}`,
        name:             data.name,
        created_by:       creatorJson,            // <<< use the fetched JSON here
        last_message_at:  data.last_message_at ? new Date(data.last_message_at) : null,
        created_at:       now,
        updated_at:       now,
        frozen:           data.frozen   ?? false,
        disabled:         data.disabled ?? false,
        hidden:           data.hidden   ?? false,
        blocked:          data.blocked  ?? false,
        member_count:     data.member_count ?? (data.members?.length ?? 0),
        config:           config,
        own_capabilities: own_capabilities,
      },
      update: {
        updated_at: now,
      },
    });

    // ───────────────────────────────────────────────────────────
    // Load the last N messages
    // ───────────────────────────────────────────────────────────
    const dbMessages = await prisma.chat_messages.findMany({
      where:   { cid: `${type}:${id}` },
      orderBy: { created_at: 'desc' },
      take:    message_limit,
    });

    const messages = dbMessages
      .reverse()
      .map((m) => ({
        id: m.id,
        text: m.text,
        html: m.html,
        type: m.type,
        user: m.user,
        attachments:          m.attachments,
        latest_reactions:     m.latest_reactions,
        own_reactions:        m.own_reactions,
        reaction_counts:      m.reaction_counts,
        reaction_scores:      m.reaction_scores,
        reply_count:          m.reply_count,
        deleted_reply_count:  m.deleted_reply_count,
        cid:        m.cid,
        created_at: m.created_at!.toISOString(),
        updated_at: m.updated_at!.toISOString(),
        shadowed:   m.shadowed,
        mentioned_users:      m.mentioned_users,
        silent:     m.silent,
        pinned:     m.pinned,
        pinned_at:  m.pinned_at?.toISOString() || null,
        pinned_by:  m.pinned_by,
        pin_expires:m.pin_expires?.toISOString() || null,
        restricted_visibility: m.restricted_visibility,
      }));

    const pinned_messages = messages.filter((m) => m.pinned);
    const last_message_at = messages.length
      ? messages[messages.length - 1].created_at
      : null;

    // keep your channel row’s last_message_at in sync
    if (last_message_at) {
      await prisma.chat_channels.update({
        where: { id },
        data:  { last_message_at: new Date(last_message_at) },
      });
    }

    // ───────────────────────────────────────────────────────────
    // Return the full QueryChannelAPIResponse envelope
    // ───────────────────────────────────────────────────────────
    const durationMs = Date.now() - start;
    res.json({
      duration:    `${durationMs.toFixed(2)}ms`,
      channel: {
        id,
        cid:              `${type}:${id}`,
        type,
        name:             data.name,
        created_by:       creatorJson,            // <<< use the fetched JSON here too
        created_at:       now.toISOString(),
        updated_at:       now.toISOString(),
        member_count:     data.member_count ?? (data.members?.length ?? 0),
        blocked:          data.blocked   ?? false,
        disabled:         data.disabled  ?? false,
        frozen:           data.frozen    ?? false,
        hidden:           data.hidden    ?? false,
        last_message_at,
        config:           config ,
        own_capabilities: own_capabilities,
      },
      members:         [],    // ChannelMemberResponse[]
      watchers:        [],    // UserResponse[]
      read:            [],    // ReadResponse[]
      pinned_messages,        // MessageResponse[]
      watcher_count:   0,     // number
      membership:      { user_id: '___yourUserId___' },
      messages,               // MessageResponse[]
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to query channel' });
  }
});


//
// 3) Your message‐saving endpoint is unchanged
//
router.post('/channels/:type/:id/message', async (req, res) => {
  const { type, id } = req.params;
  const { message } = req.body;          // Stream‑SDK style payload

  console.log(`📨 Received message for channel ${type}/${id}:`, message);

  try {
    const now = new Date();

    /* -----------------------------------------------------------
       1.  Fetch the sender from chat_users (if it exists)
    ----------------------------------------------------------- */
    let senderJson: any = null;

    if (message.user_id) {
      const sender = await prisma.chat_users.findUnique({
        where: { id: message.user_id },
      });

      if (sender) {
        // Prisma returns Dates; convert to ISO so they stay JSON‑friendly
        senderJson = {
          ...sender,
          created_at: sender.created_at?.toISOString(),
          updated_at: sender.updated_at?.toISOString(),
          last_active: sender.last_active?.toISOString(),
        };
      }
    }

    /* -----------------------------------------------------------
       2.  Insert (or upsert) the message, embedding the sender
    ----------------------------------------------------------- */
    const savedMessage = await prisma.chat_messages.create({
      data: {
        id: message.id,
        text: message.text,
        html: `\u003cp\u003e${message.text}\u003c/p\u003e\n`,
        type: message.type ?? 'regular',
        user: senderJson,                       // <‑‑ the user JSON
        attachments: message.attachments ?? [],
        latest_reactions: message.latest_reactions ?? [],
        own_reactions: message.own_reactions ?? [],
        reaction_counts: message.reaction_counts ?? {},
        reaction_scores: message.reaction_scores ?? {},
        reply_count: message.reply_count ?? 0,
        deleted_reply_count: message.deleted_reply_count ?? 0,
        cid: message.cid ?? `${type}:${id}`,
        created_at: message.created_at
          ? new Date(message.created_at)
          : now,
        updated_at: message.updated_at
          ? new Date(message.updated_at)
          : now,
        shadowed: message.shadowed ?? false,
        mentioned_users: message.mentioned_users ?? [],
        silent: message.silent ?? false,
        pinned: message.pinned ?? false,
        pinned_at: message.pinned_at
          ? new Date(message.pinned_at)
          : null,
        pinned_by: message.pinned_by ?? null,
        pin_expires: message.pin_expires
          ? new Date(message.pin_expires)
          : null,
        restricted_visibility: message.restricted_visibility ?? [],
      }
    });

    /* -----------------------------------------------------------
       3.  Respond with the saved message
    ----------------------------------------------------------- */
    res.json({
      message: {
        ...savedMessage,
        created_at: savedMessage.created_at?.toISOString() ?? null,
        updated_at: savedMessage.updated_at?.toISOString() ?? null,
      },
    });
  } catch (err) {
    console.error('❌ Error saving message to DB:', err);
    res
      .status(500)
      .json({ error: 'Failed to save message to database.' });
  }
});


export default router;
